#ifndef __FACT_N_HPP__
#define __FACT_N_HPP__
#include"fact.h"

#define FACT_N_LDBL_NMAX 199
static const struct {long double v;}fact_n_ldbl_data[200] = {
  {    1.000000000000000000000000e+00L },
  {    1.000000000000000000000000e+00L },
  {    2.000000000000000000000000e+00L },
  {    6.000000000000000000000000e+00L },
  {    2.400000000000000000000000e+01L },
  {    1.200000000000000000000000e+02L },
  {    7.200000000000000000000000e+02L },
  {    5.040000000000000000000000e+03L },
  {    4.032000000000000000000000e+04L },
  {    3.628800000000000000000000e+05L },
  {    3.628800000000000000000000e+06L },
  {    3.991680000000000000000000e+07L },
  {    4.790016000000000000000000e+08L },
  {    6.227020800000000000000000e+09L },
  {    8.717829120000000000000000e+10L },
  {    1.307674368000000000000000e+12L },
  {    2.092278988800000000000000e+13L },
  {    3.556874280960000000000000e+14L },
  {    6.402373705728000000000000e+15L },
  {    1.216451004088320000000000e+17L },
  {    2.432902008176640000000000e+18L },
  {    5.109094217170944000000000e+19L },
  {    1.124000727777607680000000e+21L },
  {    2.585201673888497664000000e+22L },
  {    6.204484017332394393600000e+23L },
  {    1.551121004333098598400000e+25L },
  {    4.032914611266056355923886e+26L },
  {    1.088886945041835216035696e+28L },
  {    3.048883446117138604942898e+29L },
  {    8.841761993739701954695181e+30L },
  {    2.652528598121910586298603e+32L },
  {    8.222838654177922817508078e+33L },
  {    2.631308369336935301602585e+35L },
  {    8.683317618811886495576761e+36L },
  {    2.952327990396041408426923e+38L },
  {    1.033314796638614492938355e+40L },
  {    3.719933267899012174625302e+41L },
  {    1.376375309122634504573583e+43L },
  {    5.230226174666011117645578e+44L },
  {    2.039788208119744335808273e+46L },
  {    8.159152832478977343431162e+47L },
  {    3.345252661316380710695857e+49L },
  {    1.405006117752879898548037e+51L },
  {    6.041526306337383563732218e+52L },
  {    2.658271574788448768062945e+54L },
  {    1.196222208654801945618356e+56L },
  {    5.502622159812088949738100e+57L },
  {    2.586232415111681806353087e+59L },
  {    1.241391559253607267119172e+61L },
  {    6.082818640342675608904848e+62L },
  {    3.041409320171337804265098e+64L },
  {    1.551118753287382280266544e+66L },
  {    8.065817517094387857020652e+67L },
  {    4.274883284060025564484016e+69L },
  {    2.308436973392413804649262e+71L },
  {    1.269640335365827592583434e+73L },
  {    7.109985878048634518467230e+74L },
  {    4.052691950487721675501801e+76L },
  {    2.350561331282878571853816e+78L },
  {    1.386831185456898357383708e+80L },
  {    8.320987112741390144353670e+81L },
  {    5.075802138772247988162696e+83L },
  {    3.146997326038793752671403e+85L },
  {    1.982608315404440064152654e+87L },
  {    1.268869321858841641057699e+89L },
  {    8.247650592082470666881942e+90L },
  {    5.443449390774430640177419e+92L },
  {    3.647111091818868528737945e+94L },
  {    2.480035542436830599614173e+96L },
  {    1.711224524281413113671252e+98L },
  {   1.197857166996989179617305e+100L },
  {   8.504785885678623175292348e+101L },
  {   6.123445837688608686161924e+103L },
  {   4.470115461512684340789415e+105L },
  {   3.307885441519386412204060e+107L },
  {   2.480914081139539809127582e+109L },
  {   1.885494701666050254969555e+111L },
  {   1.451830920282858696310913e+113L },
  {   1.132428117820629783162562e+115L },
  {   8.946182130782975287112397e+116L },
  {   7.156945704626380229689918e+118L },
  {   5.797126020747367985821359e+120L },
  {   4.753643337012841748530297e+122L },
  {   3.945523969720658651219225e+124L },
  {   3.314240134565353266859017e+126L },
  {   2.817104114380550277009241e+128L },
  {   2.422709538367273238216674e+130L },
  {   2.107757298379527717234077e+132L },
  {   1.854826422573984391079796e+134L },
  {   1.650795516090846108118151e+136L },
  {   1.485715964481761497326510e+138L },
  {   1.352001527678402962565510e+140L },
  {   1.243841405464130725481769e+142L },
  {   1.156772507081641574760185e+144L },
  {   1.087366156656743080262727e+146L },
  {   1.032997848823905926263671e+148L },
  {   9.916779348709496891909427e+149L },
  {   9.619275968248211985560281e+151L },
  {   9.426890448883247745269876e+153L },
  {   9.332621544394415268456796e+155L },
  {   9.332621544394415268047440e+157L },
  {   9.425947759838359420537378e+159L },
  {   9.614466715035126609054826e+161L },
  {   9.902900716486180407775222e+163L },
  {   1.029901674514562762383649e+166L },
  {   1.081396758240290900493242e+168L },
  {   1.146280563734708354516698e+170L },
  {   1.226520203196137939378695e+172L },
  {   1.324641819451828974492119e+174L },
  {   1.443859583202493582180320e+176L },
  {   1.588245541522742940439541e+178L },
  {   1.762952551090244663834290e+180L },
  {   1.974506857221074023494405e+182L },
  {   2.231192748659813646682565e+184L },
  {   2.543559733472187557063333e+186L },
  {   2.925093693493015690547354e+188L },
  {   3.393108684451898201204004e+190L },
  {   3.969937160808720895441533e+192L },
  {   4.684525849754290656462718e+194L },
  {   5.574585761207605881456564e+196L },
  {   6.689502913449127057747876e+198L },
  {   8.094298525273443739465166e+200L },
  {   9.875044200833601362240451e+202L },
  {   1.214630436702532967553876e+205L },
  {   1.506141741511140879731997e+207L },
  {   1.882677176888926099719298e+209L },
  {   2.372173242880046885610672e+211L },
  {   3.012660018457659544778021e+213L },
  {   3.856204823625804217315867e+215L },
  {   4.974504222477287440315043e+217L },
  {   6.466855489220473672782714e+219L },
  {   8.471580690878820510690129e+221L },
  {   1.118248651196004307492614e+224L },
  {   1.487270706090685728923039e+226L },
  {   1.992942746161518876810809e+228L },
  {   2.690472707318050483495694e+230L },
  {   3.659042881952548657655138e+232L },
  {   5.012888748274991660963300e+234L },
  {   6.917786472619488492081092e+236L },
  {   9.615723196941089004147156e+238L },
  {   1.346201247571752460576083e+241L },
  {   1.898143759076170969380468e+243L },
  {   2.695364137888162776512862e+245L },
  {   3.854370717180072770671608e+247L },
  {   5.550293832739304789378986e+249L },
  {   8.047926057471991945065285e+251L },
  {   1.174997204390910823938794e+254L },
  {   1.727245890454638911141697e+256L },
  {   2.556323917872865588574365e+258L },
  {   3.808922637630569726917458e+260L },
  {   5.713383956445854590450869e+262L },
  {   8.627209774233240431246238e+264L },
  {   1.311335885683452545591380e+267L },
  {   2.006343905095682394846545e+269L },
  {   3.089769613847350888032176e+271L },
  {   4.789142901463393876193269e+273L },
  {   7.471062926282894446899037e+275L },
  {   1.172956879426414428218404e+278L },
  {   1.853271869493734796525114e+280L },
  {   2.946702272495038326439507e+282L },
  {   4.714723635992061322545045e+284L },
  {   7.590705053947218729071811e+286L },
  {   1.229694218739449434109633e+289L },
  {   2.004401576545302577546930e+291L },
  {   3.287218585534296227366305e+293L },
  {   5.423910666131588775182101e+295L },
  {   9.003691705778437366749109e+297L },
  {   1.503616514864999040172791e+300L },
  {   2.526075744973198387467054e+302L },
  {   4.269068009004705274880661e+304L },
  {   7.257415615307998967392294e+306L },
  {   1.241018070217667823446618e+309L },
  {   2.134551080774388656365605e+311L },
  {   3.692773369739692375278984e+313L },
  {   6.425425663347064733481039e+315L },
  {   1.124449491085736328299668e+318L },
  {   1.979031104310895937874385e+320L },
  {   3.502885054630285809849076e+322L },
  {   6.235135397241908741794690e+324L },
  {   1.116089236106301664793890e+327L },
  {   2.008960624991342996621810e+329L },
  {   3.636218731234330823731307e+331L },
  {   6.617918090846482099397152e+333L },
  {   1.211079010624906224179500e+336L },
  {   2.228385379549827452443953e+338L },
  {   4.122512952167180787238738e+340L },
  {   7.667874091030956263593595e+342L },
  {   1.433892455022788821403728e+345L },
  {   2.695717815442842984147815e+347L },
  {   5.094906671186973240007535e+349L },
  {   9.680322675255249156224852e+351L },
  {   1.848941630973752588770271e+354L },
  {   3.549967931469604970438921e+356L },
  {   6.851438107736337593243367e+358L },
  {   1.329178992900849493062961e+361L },
  {   2.591899036156656511365431e+363L },
  {   5.080122110867046762429176e+365L },
  {   1.000784055840808212219958e+368L },
  {   1.981552430564800260193951e+370L },
  {   3.943289336823952517777944e+372L },
};

#define FACT_N_DBL_NMAX 170
static const struct {double v;}fact_n_dbl_data[171] = {
  {    1.000000000000000000000000e+00 },
  {    1.000000000000000000000000e+00 },
  {    2.000000000000000000000000e+00 },
  {    6.000000000000000000000000e+00 },
  {    2.400000000000000000000000e+01 },
  {    1.200000000000000000000000e+02 },
  {    7.200000000000000000000000e+02 },
  {    5.040000000000000000000000e+03 },
  {    4.032000000000000000000000e+04 },
  {    3.628800000000000000000000e+05 },
  {    3.628800000000000000000000e+06 },
  {    3.991680000000000000000000e+07 },
  {    4.790016000000000000000000e+08 },
  {    6.227020800000000000000000e+09 },
  {    8.717829120000000000000000e+10 },
  {    1.307674368000000000000000e+12 },
  {    2.092278988800000000000000e+13 },
  {    3.556874280960000000000000e+14 },
  {    6.402373705728000000000000e+15 },
  {    1.216451004088320000000000e+17 },
  {    2.432902008176640000000000e+18 },
  {    5.109094217170944000000000e+19 },
  {    1.124000727777607680000000e+21 },
  {    2.585201673888497664000000e+22 },
  {    6.204484017332394393600000e+23 },
  {    1.551121004333098598400000e+25 },
  {    4.032914611266056355923886e+26 },
  {    1.088886945041835216035696e+28 },
  {    3.048883446117138604942898e+29 },
  {    8.841761993739701954695181e+30 },
  {    2.652528598121910586298603e+32 },
  {    8.222838654177922817508078e+33 },
  {    2.631308369336935301602585e+35 },
  {    8.683317618811886495576761e+36 },
  {    2.952327990396041408426923e+38 },
  {    1.033314796638614492938355e+40 },
  {    3.719933267899012174625302e+41 },
  {    1.376375309122634504573583e+43 },
  {    5.230226174666011117645578e+44 },
  {    2.039788208119744335808273e+46 },
  {    8.159152832478977343431162e+47 },
  {    3.345252661316380710695857e+49 },
  {    1.405006117752879898548037e+51 },
  {    6.041526306337383563732218e+52 },
  {    2.658271574788448768062945e+54 },
  {    1.196222208654801945618356e+56 },
  {    5.502622159812088949738100e+57 },
  {    2.586232415111681806353087e+59 },
  {    1.241391559253607267119172e+61 },
  {    6.082818640342675608904848e+62 },
  {    3.041409320171337804265098e+64 },
  {    1.551118753287382280266544e+66 },
  {    8.065817517094387857020652e+67 },
  {    4.274883284060025564484016e+69 },
  {    2.308436973392413804649262e+71 },
  {    1.269640335365827592583434e+73 },
  {    7.109985878048634518467230e+74 },
  {    4.052691950487721675501801e+76 },
  {    2.350561331282878571853816e+78 },
  {    1.386831185456898357383708e+80 },
  {    8.320987112741390144353670e+81 },
  {    5.075802138772247988162696e+83 },
  {    3.146997326038793752671403e+85 },
  {    1.982608315404440064152654e+87 },
  {    1.268869321858841641057699e+89 },
  {    8.247650592082470666881942e+90 },
  {    5.443449390774430640177419e+92 },
  {    3.647111091818868528737945e+94 },
  {    2.480035542436830599614173e+96 },
  {    1.711224524281413113671252e+98 },
  {   1.197857166996989179617305e+100 },
  {   8.504785885678623175292348e+101 },
  {   6.123445837688608686161924e+103 },
  {   4.470115461512684340789415e+105 },
  {   3.307885441519386412204060e+107 },
  {   2.480914081139539809127582e+109 },
  {   1.885494701666050254969555e+111 },
  {   1.451830920282858696310913e+113 },
  {   1.132428117820629783162562e+115 },
  {   8.946182130782975287112397e+116 },
  {   7.156945704626380229689918e+118 },
  {   5.797126020747367985821359e+120 },
  {   4.753643337012841748530297e+122 },
  {   3.945523969720658651219225e+124 },
  {   3.314240134565353266859017e+126 },
  {   2.817104114380550277009241e+128 },
  {   2.422709538367273238216674e+130 },
  {   2.107757298379527717234077e+132 },
  {   1.854826422573984391079796e+134 },
  {   1.650795516090846108118151e+136 },
  {   1.485715964481761497326510e+138 },
  {   1.352001527678402962565510e+140 },
  {   1.243841405464130725481769e+142 },
  {   1.156772507081641574760185e+144 },
  {   1.087366156656743080262727e+146 },
  {   1.032997848823905926263671e+148 },
  {   9.916779348709496891909427e+149 },
  {   9.619275968248211985560281e+151 },
  {   9.426890448883247745269876e+153 },
  {   9.332621544394415268456796e+155 },
  {   9.332621544394415268047440e+157 },
  {   9.425947759838359420537378e+159 },
  {   9.614466715035126609054826e+161 },
  {   9.902900716486180407775222e+163 },
  {   1.029901674514562762383649e+166 },
  {   1.081396758240290900493242e+168 },
  {   1.146280563734708354516698e+170 },
  {   1.226520203196137939378695e+172 },
  {   1.324641819451828974492119e+174 },
  {   1.443859583202493582180320e+176 },
  {   1.588245541522742940439541e+178 },
  {   1.762952551090244663834290e+180 },
  {   1.974506857221074023494405e+182 },
  {   2.231192748659813646682565e+184 },
  {   2.543559733472187557063333e+186 },
  {   2.925093693493015690547354e+188 },
  {   3.393108684451898201204004e+190 },
  {   3.969937160808720895441533e+192 },
  {   4.684525849754290656462718e+194 },
  {   5.574585761207605881456564e+196 },
  {   6.689502913449127057747876e+198 },
  {   8.094298525273443739465166e+200 },
  {   9.875044200833601362240451e+202 },
  {   1.214630436702532967553876e+205 },
  {   1.506141741511140879731997e+207 },
  {   1.882677176888926099719298e+209 },
  {   2.372173242880046885610672e+211 },
  {   3.012660018457659544778021e+213 },
  {   3.856204823625804217315867e+215 },
  {   4.974504222477287440315043e+217 },
  {   6.466855489220473672782714e+219 },
  {   8.471580690878820510690129e+221 },
  {   1.118248651196004307492614e+224 },
  {   1.487270706090685728923039e+226 },
  {   1.992942746161518876810809e+228 },
  {   2.690472707318050483495694e+230 },
  {   3.659042881952548657655138e+232 },
  {   5.012888748274991660963300e+234 },
  {   6.917786472619488492081092e+236 },
  {   9.615723196941089004147156e+238 },
  {   1.346201247571752460576083e+241 },
  {   1.898143759076170969380468e+243 },
  {   2.695364137888162776512862e+245 },
  {   3.854370717180072770671608e+247 },
  {   5.550293832739304789378986e+249 },
  {   8.047926057471991945065285e+251 },
  {   1.174997204390910823938794e+254 },
  {   1.727245890454638911141697e+256 },
  {   2.556323917872865588574365e+258 },
  {   3.808922637630569726917458e+260 },
  {   5.713383956445854590450869e+262 },
  {   8.627209774233240431246238e+264 },
  {   1.311335885683452545591380e+267 },
  {   2.006343905095682394846545e+269 },
  {   3.089769613847350888032176e+271 },
  {   4.789142901463393876193269e+273 },
  {   7.471062926282894446899037e+275 },
  {   1.172956879426414428218404e+278 },
  {   1.853271869493734796525114e+280 },
  {   2.946702272495038326439507e+282 },
  {   4.714723635992061322545045e+284 },
  {   7.590705053947218729071811e+286 },
  {   1.229694218739449434109633e+289 },
  {   2.004401576545302577546930e+291 },
  {   3.287218585534296227366305e+293 },
  {   5.423910666131588775182101e+295 },
  {   9.003691705778437366749109e+297 },
  {   1.503616514864999040172791e+300 },
  {   2.526075744973198387467054e+302 },
  {   4.269068009004705274880661e+304 },
  {   7.257415615307998967392294e+306 },
};

#define FACT_N_UINT64T_NMAX  20
static const unsigned long long int fact_n_uint64t_data[] = {
                                 1ull,// n = 0
                                 1ull,
                                 2ull,
                                 6ull,
                                24ull,
                               120ull,
                               720ull,
                              5040ull,
                             40320ull,
                            362880ull,
                           3628800ull,
                          39916800ull,
                         479001600ull,
                        6227020800ull,
                       87178291200ull,
                     1307674368000ull,
                    20922789888000ull,
                   355687428096000ull,
                  6402373705728000ull,
                121645100408832000ull,
               2432902008176640000ull,
//              51090942171709440000ull,// n = 21; n! ~ 1.0e+19
//            1124000727777607680000ull,// n = 22; n! ~ 1.0e+21
//           25852016738884976640000ull,
//          620448401733239439360000ull,// n = 24; n! ~ 1.0e+23
};

#define FACT_N_UINT32T_NMAX  12
static const unsigned int fact_n_uint32t_data[13] = {
                                 1u,// n = 0
                                 1u,
                                 2u,
                                 6u,
                                24u,
                               120u,
                               720u,
                              5040u,
                             40320u,
                            362880u,
                           3628800u,
                          39916800u,
                         479001600u,// n = 12; n! ~ 1.0e+08
//                        6227020800u,// n = 13; n! ~ 1.0e+09
//                       87178291200u,
//                     1307674368000u,
//                    20922789888000u,
//                   355687428096000u,
//                  6402373705728000u,
//                121645100408832000u,
//               2432902008176640000u,
//              51090942171709440000u,// n = 21; n! ~ 1.0e+19
};

typedef unsigned int u32_t;
typedef unsigned long int ul_t;
typedef unsigned long long int u64_t;
typedef float f23_t;
typedef double f52_t;
typedef long double f64_t;

#define FACT_N_FLT_NMAX 33
// nmax
template<typename T> static u32_t nmax(){return 1024u;}
//template<> u32_t nmax<ul_t>(){return FACT_N_UINT32T_NMAX;}
template<> u32_t nmax<u32_t>(){return FACT_N_UINT32T_NMAX;}
template<> u32_t nmax<u64_t>(){return FACT_N_UINT64T_NMAX;}
template<> u32_t nmax<f23_t>(){return FACT_N_FLT_NMAX;}
template<> u32_t nmax<f52_t>(){return FACT_N_DBL_NMAX;}
template<> u32_t nmax<f64_t>(){return FACT_N_LDBL_NMAX;}
// fact_n_data
template<typename T> static T const & fact_n_data(int n)
{
	static T v = T(1);
	v = 1;
	for(int i = 1; i <= n; ++i)
		v *= i;
	return v;
}
//template<>  ul_t const & fact_n_data(int n){return fact_n_uint32t_data[n];}
template<> u32_t const & fact_n_data(int n){return fact_n_uint32t_data[n];}
template<> u64_t const & fact_n_data(int n){return fact_n_uint64t_data[n];}
template   f23_t const & fact_n_data(int n);
template<> f52_t const & fact_n_data(int n){return fact_n_dbl_data[n].v;}
template<> f64_t const & fact_n_data(int n){return fact_n_ldbl_data[n].v;}

#include<cstdlib>// exit
#include<iostream>
/*
u32_t const & math::fact_n(int n)
{
	return math::fact_n<u32_t>(n);
}
*/
template<typename T>
T const & math::fact_n(int n)
{
	if( n < 0 )
	{
		std::cerr << "Error: [fact_n] negative n : " << n << std::endl;
		exit(1);
	}
	else if( n > nmax<T>() )
	{
		std::cerr << "Error: [fact_n] n/NMAX : " << n << "/" << nmax<T>() << std::endl;
		exit(1);
	}
	else
		return fact_n_data<T>(n);
}

template u32_t const & math::fact_n(int n);
template u64_t const & math::fact_n(int n);
template f23_t const & math::fact_n(int n);
template f52_t const & math::fact_n(int n);
template f64_t const & math::fact_n(int n);

#include"mpreal.use.h"
#ifdef  __MPREAL_USE
#include"mpreal.h"
template<> mpfr::mpreal const & fact_n_data<mpfr::mpreal>(int n)
{
	static mpfr::mpreal v = mpfr::mpreal(1);
	if( n > FACT_N_UINT64T_NMAX )
	{
		v = math::fact_n<u64_t>(FACT_N_UINT64T_NMAX);
		for(int i = FACT_N_UINT64T_NMAX+1; i <= n; ++i)
			v *= i;
	}
	else
		v = math::fact_n<u64_t>(n);
	return v;
}
/*
template<> mpfr::mpreal const & fact_n_data<mpfr::mpreal>(int n)
{ // very slow algorithm
	static mpfr::mpreal v = mpfr::mpreal(1), N;
	if( n > FACT_N_UINT64T_NMAX )
	{
		N = n;
		for( long int c = n - 1; c > FACT_N_UINT64T_NMAX; --c )
		{
			v = 0;
			for( long int b = c; b > 0; b >>= 1, N <<= 1 )
				if( b & 1 ) v += N;
			N = v;
		}
		v *= math::fact_n<u64_t>(FACT_N_UINT64T_NMAX);
	}
	else
		v = math::fact_n<u64_t>(n);
	return v;
}
*/
template mpfr::mpreal const & math::fact_n(int n);
#endif

#endif//__FACT_N_HPP__
