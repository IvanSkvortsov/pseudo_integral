#ifndef __FACT_2N1_HPP__
#define __FACT_2N1_HPP__
#include"fact.h"

#define FACT_2N1_NMAX 129

static const struct {long double v;} fact_2n1_data[130] = {
  {    1.000000000000000000000000e+00L },
  {    3.000000000000000000000000e+00L },
  {    1.500000000000000000000000e+01L },
  {    1.050000000000000000000000e+02L },
  {    9.450000000000000000000000e+02L },
  {    1.039500000000000000000000e+04L },
  {    1.351350000000000000000000e+05L },
  {    2.027025000000000000000000e+06L },
  {    3.445942500000000000000000e+07L },
  {    6.547290750000000000000000e+08L },
  {    1.374931057500000000000000e+10L },
  {    3.162341432250000000000000e+11L },
  {    7.905853580625000000000000e+12L },
  {    2.134580466768750000000000e+14L },
  {    6.190283353629375000000000e+15L },
  {    1.918987839625106250000000e+17L },
  {    6.332659870762850625000000e+18L },
  {    2.216430954766997718720000e+20L },
  {    8.200794532637891559424000e+21L },
  {    3.198309867728777708175360e+23L },
  {    1.311307045768798860319130e+25L },
  {    5.638620296805835099393229e+26L },
  {    2.537379133562625794676621e+28L },
  {    1.192568192774434123506602e+30L },
  {    5.843584144594727205134246e+31L },
  {    2.980227913743310874644854e+33L },
  {    1.579520794283954763595549e+35L },
  {    8.687364368561751199595378e+36L },
  {    4.951797690080198183884658e+38L },
  {    2.921560637147316928587871e+40L },
  {    1.782151988659863326431518e+42L },
  {    1.122755752855713895660923e+44L },
  {    7.297912393562140321312430e+45L },
  {    4.889601303686634015588813e+47L },
  {    3.373824899543777470641400e+49L },
  {    2.395415678676082004170606e+51L },
  {    1.748653445433539863046165e+53L },
  {    1.311490084075154897338624e+55L },
  {    1.009847364737869270933460e+57L },
  {    7.977794181429167239965997e+58L },
  {    6.462013286957625464345235e+60L },
  {    5.363471028174829135664397e+62L },
  {    4.558950373948604765078350e+64L },
  {    3.966286825335286145652418e+66L },
  {    3.529995274548404669678151e+68L },
  {    3.212295699839048249315920e+70L },
  {    2.987435000850314871935641e+72L },
  {    2.838063250807799128266066e+74L },
  {    2.752921353283565154594627e+76L },
  {    2.725392139750729502971786e+78L },
  {    2.752646061148236797899062e+80L },
  {    2.835225442982683902000584e+82L },
  {    2.976986715131818096949227e+84L },
  {    3.185375785191045363889429e+86L },
  {    3.472059605858239446475022e+88L },
  {    3.853986162502645785704604e+90L },
  {    4.355004363627989737985342e+92L },
  {    5.008255018172188198635085e+94L },
  {    5.859658371261460192312586e+96L },
  {    6.972993461801137628532392e+98L },
  {   8.437322088779376530743550e+100L },
  {   1.037790616919863313317123e+103L },
  {   1.297238271149829141609493e+105L },
  {   1.647492604360283009826650e+107L },
  {   2.125265459624765082628635e+109L },
  {   2.784097752108442258339253e+111L },
  {   3.702850010304228203497339e+113L },
  {   4.998847513910708074794833e+115L },
  {   6.848421094057670062340761e+117L },
  {   9.519305320740161387030959e+119L },
  {   1.342222050224362755607061e+122L },
  {   1.919377531820838740475094e+124L },
  {   2.783097421140216173618935e+126L },
  {   4.091153209076117775146443e+128L },
  {   6.095818281523415485002019e+130L },
  {   9.204685605100357382675306e+132L },
  {   1.408316897580354679560404e+135L },
  {   2.182891191249549753289468e+137L },
  {   3.427139170261793112654378e+139L },
  {   5.449151280716251049306383e+141L },
  {   8.773133561953164189274202e+143L },
  {   1.430020770598365762825464e+146L },
  {   2.359534271487303508603530e+148L },
  {   3.940422233383796859453848e+150L },
  {   6.659313574418616692594121e+152L },
  {   1.138742621225583454431778e+155L },
  {   1.970024734720259376196049e+157L },
  {   3.447543285760453908158503e+159L },
  {   6.102151615796003417547251e+161L },
  {   1.092285139227484611729739e+164L },
  {   1.977036102001747147269537e+166L },
  {   3.617976066663197279559195e+168L },
  {   6.693255723326914966855126e+170L },
  {   1.251638820262133098839618e+173L },
  {   2.365597370295431556892688e+175L },
  {   4.518290977264274273539752e+177L },
  {   8.720301586120049347624178e+179L },
  {   1.700458809293409622876693e+182L },
  {   3.349903854308016956974947e+184L },
  {   6.666308670072953744595748e+186L },
  {   1.339928042684663702678369e+189L },
  {   2.720053926649867316269224e+191L },
  {   5.576110549632227998334905e+193L },
  {   1.154254883773871195731701e+196L },
  {   2.412392707087390798858407e+198L },
  {   5.090148611954394586016564e+200L },
  {   1.084201654346286046775386e+203L },
  {   2.331033556844515000561980e+205L },
  {   5.058342818352597551226023e+207L },
  {   1.107777077219218863727689e+210L },
  {   2.448187340654473688922312e+212L },
  {   5.459457769659476326245656e+214L },
  {   1.228377998173382173377708e+217L },
  {   2.788418055853577533531517e+219L },
  {   6.385477347904692551891275e+221L },
  {   1.475045267365983979487668e+224L },
  {   3.436855472962742672229343e+226L },
  {   8.076610361462445279903335e+228L },
  {   1.914156655666599531341693e+231L },
  {   4.574834407043172879815751e+233L },
  {   1.102535092097404663973545e+236L },
  {   2.679160273796693333684062e+238L },
  {   6.563942670801898667418640e+240L },
  {   1.621293839688068970808304e+243L },
  {   4.037021660823291737395036e+245L },
  {   1.013292436866646226047777e+248L },
  {   2.563629865272614951999121e+250L },
  {   6.537256156445168127470452e+252L },
  {   1.680074832206408208759509e+255L },
  {   4.351393815414597260676953e+257L },
};

#include<cstdlib>// exit
#include<iostream>

long double const & math::fact_2n1_n(int n)// (2 * n + 1)!!
{
	if( n == -1 )
		n = 0;
	if( n < 0 )
	{
		std::cerr << "Error: [fact_2n1_n] negative n : " << n << std::endl;
		exit(1);
	}
	else if( n > FACT_2N1_NMAX )
	{
		std::cerr << "Error: [fact_2n1_n] n/NMAX : " << n << "/" << FACT_2N1_NMAX << std::endl;
		exit(1);
	} else
		return fact_2n1_data[n].v;
}

long double const & math::fact_2n1(int n)// t <- (2*t+1 = n); n <- ((n-1)/2 = t)
{
	if( n%2 != 1 )
	{
		std::cerr << "Error: [fact_2n1] even n : " << n << std::endl;
		exit(1);
	} else
		return math::fact_2n1_n( (n-1)/2 );
}

#endif//__FACT_2N1_HPP__
